#!/usr/bin/env php
<?php

function askFor($description, $default = null, callable $validate = null)
{
    echo $description;
    $msg = null;
    do {
        if (PHP_OS == 'WINNT') {
            echo ': ';
            $line = stream_get_line(STDIN, 1024, PHP_EOL);
        } else {
            $line = readline(': ');
        }

        if(empty($line)) {
            if (null === $default) {
                $msg = 'No value given, please repeat';
            } else {
                $line = $default;
            }
        }

        if ($msg || (null !== $validate && null !== ($msg = $validate($line)))) {
            echo $msg;
        }
    } while (null !== $msg);

    return $line;
}

function generateProjectNamespace($projectName) {

    $projectName = substr($projectName, strpos($projectName, '/')+1);

    if (strlen($projectName) <= 8 && preg_match('/^[a-z\\\]+$/i', $projectName)) {
        return ucfirst($projectName);
    }

    return join('', array_filter(array_map(function ($word) {
            return strtoupper(substr(trim($word), 0, 1));
        }, preg_split("/(?=[A-Z\-\_])/", strtr($projectName, ['_' => '', '-' => '']))))
    );
}

function updateComposerInfo($name, $description, $namespace) {
    $composerJson = __DIR__ . '/../../composer.json';
    $composer = json_decode(file_get_contents($composerJson), true);
    $composer['name'] = $name;
    $composer['license'] = 'proprietary';
    $composer['description'] = $description;

    $oldVal = $composer['autoload']['psr-4']['App\\'];
    unset($composer['autoload']['psr-4']['App\\']);
    $composer['autoload']['psr-4'][$namespace . '\\'] = $oldVal;

    $oldVal = $composer['autoload-dev']['psr-4']['features\\App\\'];
    unset($composer['autoload-dev']['psr-4']['features\\App\\']);
    $composer['autoload-dev']['psr-4']['features\\' . $namespace . '\\'] = $oldVal;

    file_put_contents(
        $composerJson,
        json_encode($composer, JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES)
    );
}

function replaceNamespaces($namespaces) {
    $phpPairs = [
        'namespace App' => 'namespace ' . $namespaces,
        'use App' => 'use ' . $namespaces,
        'new App\\' => 'new ' . $namespaces . '\\',
    ];

    $yamlPairs = [
        'class: App\\' => 'class: ' . $namespaces . '\\',
    ];

    $files = [
        __DIR__ . '/../../app/AppKernel.php',
        __DIR__ . '/../../src/AppBundle.php'
    ];
    foreach ($files as $file) {
        file_put_contents($file, strtr(file_get_contents($file), $phpPairs));
    }
}

$projectName = askFor('Project Name [intellectsoft/app]', 'intellectsoft/app', function ($val) {
    if (!preg_match('/^\w+\/\w+$/', $val)) {
        return 'Please enter valid values [intellectsoft/app]';
    }
});
$projectDescription = askFor('Project Description []', '');
$projectNamespace = generateProjectNamespace($projectName);
$projectNamespace = askFor(
    sprintf('Project Namespace [%s]', $projectNamespace ? :'App'),
    $projectNamespace,
    function ($val) use ($projectNamespace) {
        if (!preg_match('/^[a-z\\\]+$/i', strtr($val, ['/' => '\\']))) {
            return sprintf('Wrong namespace, please try again [%s]', $projectNamespace);
        }

        return null;
    }
);

updateComposerInfo($projectName, $projectDescription, $projectNamespace);
replaceNamespaces($projectNamespace);
